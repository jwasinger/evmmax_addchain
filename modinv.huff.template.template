// Code generated by {{ .Meta.Name }}. DO NOT EDIT.

package evmmax_addchain

// Allocate Temporaries.
{{- range .Program.Temporaries }}
{{"{{"}} alloc_slot("{{ . }}" {{"}}"}}
{{- end }}

#define macro FqInv() = takes(0) returns(0) {
	// Inversion computation is derived from the addition chain:
	//
	{{- range lines (format .Script) }}
	//	{{ . }}
	{{- end }}
	//
	// Operations: {{ .Ops.Doubles }} squares {{ .Ops.Adds }} multiplies
	//
	// Generated by {{ .Meta.Module }} {{ .Meta.ReleaseTag }}.

	{{ range $i := .Program.Instructions }}
	// {{ printf "Step %d: %s = x^%#x" $i.Output.Index $i.Output (index $.Chain $i.Output.Index) }}
	{{- with add $i.Op }}
    {{"{{"}} emit_mulmontx({{$i.Output}},"{{ .X }}", "{{ .Y }}") {{"}}"}}
	{{ end -}}

	{{- with double $i.Op }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ .X }}","{{ .X }}") {{"}}"}}
	{{ end -}}

	{{- with shift $i.Op -}}
	{{- $first := 0 -}}
	{{- if ne $i.Output.Identifier .X.Identifier }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ .X }}", "{{ .X }}") {{"}}"}}
	{{- $first = 1 -}}
	{{- end }}
    {{ range $j := intRange 1 .S }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ $i.Output }}","{{ $i.Output }}") {{"}}"}}
    {{ end -}}
	{{ end -}}
	{{- end }}
	return z
}
